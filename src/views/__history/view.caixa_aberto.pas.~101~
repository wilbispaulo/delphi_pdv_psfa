unit view.caixa_aberto;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.StdCtrls, Vcl.Mask, Vcl.ExtCtrls, Vcl.DBCtrls, Vcl.Imaging.pngimage,
  WWPMaskEdit, classe.pdvlanc, classe.ticket, unitDados, unit_globals,
  unit_funcoes, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  classe.ticketitens;

type
  TfrmCaixaAberto = class(TForm)
    pnlFundoCaixaAberto: TPanel;
    lblProduto: TLabel;
    lblCod: TLabel;
    lblQtd: TLabel;
    lblTxtX: TLabel;
    lblTxtIgual: TLabel;
    lblVlUn: TLabel;
    lblVlTotIt: TLabel;
    pnlTicket: TPanel;
    pnlTicketTop: TPanel;
    pnlTicketBottom: TPanel;
    lstTicketCorpo: TListBox;
    pnlCpoProduto: TPanel;
    shpCpoProduto: TShape;
    edtCpoProduto: TEdit;
    pnlCpoCod: TPanel;
    shpCpoCod: TShape;
    edtCpoCod: TWWPMaskEdit;
    pnlCpoQtd: TPanel;
    shpCpoQtd: TShape;
    edtCpoQtd: TWWPMaskEdit;
    pnlCpoVlUn: TPanel;
    shpCpoVlUn: TShape;
    edtVlUn: TWWPMaskEdit;
    pnlCpoVlTotIt: TPanel;
    shpCpoVlTotIt: TShape;
    edtVlCpoVlTotIt: TWWPMaskEdit;
    lblSubTotal: TLabel;
    edtSubtotal: TEdit;
    edtTicketTopL2: TEdit;
    edtTicketTopL1: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure lstTicketCorpoDrawItem(Control: TWinControl; Index: Integer;
      Rect: TRect; State: TOwnerDrawState);
    procedure prcIniciaTicketTela;
    procedure prcCarregaItensTicketTela(qTabelaItens: TFDQuery);
    procedure prcCarregaTicketTela;
    procedure prcAjustaMedidas;
    function fncTextoEspacoFim(sTexto: string; iTamanho: Integer): string;
    function fncTextoEspacoIni(sTexto: string; iTamanho: Integer): string;

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCaixaAberto: TfrmCaixaAberto;
  qryTicketItens: TFDQuery;

implementation

{$R *.dfm}

function TfrmCaixaAberto.fncTextoEspacoIni(sTexto: string;
  iTamanho: Integer): string;
begin
  if iTamanho > Trim(sTexto).Length then
    Result := Espaco(iTamanho - Trim(sTexto).Length) + Trim(sTexto)
  else
    Result := Trim(sTexto).Substring(iTamanho - Trim(sTexto).Length);
end;

procedure TfrmCaixaAberto.FormCreate(Sender: TObject);
begin
  // Inicializa TICKET
  frmDados.Ticket := TTicket.Create(frmDados.FDConnection);

  // Inicializa TICKET ITENS
  frmDados.TicketItens := TTicketItens.Create(frmDados.FDConnection);

  frmDados.Ticket.pdv := frmDados.PdvLanc.IdPDV;
  frmDados.Ticket.caixa := frmDados.PdvLanc.IdCaixa;
  frmDados.Ticket.opnome := frmDados.PdvLanc.Usuario;
  frmDados.Ticket.data := Date;

  prcAjustaMedidas;
  prcIniciaTicketTela;

  // Verifica se tem ticket aberto no BD
  if frmDados.Ticket.fncTicketAberto then
  begin
    // Monta cabeçalho do TICKET na tela
    prcCarregaTicketTela;

    // Verifica itens abertos no ticket
    qryTicketItens := frmDados.TicketItens.fncPegaItensDoTicket(frmDados.Ticket.data, frmDados.Ticket.numticket);

    if qryTicketItens.RecordCount > 0 then
    begin
      prcCarregaItensTicketTela(qryTicketItens);
    end;
  end;


end;

function TfrmCaixaAberto.fncTextoEspacoFim(sTexto: string;
  iTamanho: Integer): string;
begin
  if iTamanho > Trim(sTexto).Length then
    Result := Trim(sTexto) + Espaco(iTamanho - Trim(sTexto).Length)
  else
    Result := Trim(sTexto).Substring(0, iTamanho);
end;

procedure TfrmCaixaAberto.lstTicketCorpoDrawItem(Control: TWinControl;
  Index: Integer; Rect: TRect; State: TOwnerDrawState);
begin
  if not Odd(Index) then
  begin
    lstTicketCorpo.Canvas.Brush.Color := cCorZebra1;
  end
  else
  begin
    lstTicketCorpo.Canvas.Brush.Color := cCorZebra2;
    lstTicketCorpo.Canvas.Font.Name := 'IBM Plex Mono SemiBold';
    lstTicketCorpo.Canvas.Font.Size := Round(lstTicketCorpo.Font.Size * 1.1);
  end;
  lstTicketCorpo.Canvas.FillRect(Rect);
  lstTicketCorpo.Canvas.TextOut(0, Rect.Top + 2, lstTicketCorpo.Items[Index]);
end;

procedure TfrmCaixaAberto.prcAjustaMedidas;
begin
//  pnlTicket.Height := Screen.Height - 140;


  pnlTicketTop.Height       := Round(gcFatorV * 60);

  pnlTicketBottom.Height    := Round(gcFatorV * 50);

  lstTicketCorpo.ItemHeight := Round(gcFatorV * 25);

  pnlTicket.Width           := Round(gcFatorH * 500);
  pnlTicket.Left            := Screen.Width - pnlTicket.Width - 35;
  pnlTicket.Height          := pnlTicketTop.Height + pnlTicketBottom.Height + lstTicketCorpo.ItemHeight * 18;

  pnlTicketTop.Font.Size    := Round(gcFatorV * 11);

  edtTicketTopL1.Width      := pnlTicket.Width;
  edtTicketTopL1.Top        := Round(gcFatorV * 3);

  edtTicketTopL2.Width      := pnlTicket.Width;
  edtTicketTopL2.Top        := Round(gcFatorV * 30);

  lblSubTotal.Font.Size     := Round(gcFatorV * 18);
  lblSubTotal.Width         := Round(gcFatorV * 106);
  lblSubTotal.Height        := Round(gcFatorV * 32);

  edtSubtotal.Font.Size     := Round(gcFatorV * 18);
  edtSubtotal.Width         := Round(gcFatorV * 200);
  edtSubtotal.Height        := Round(gcFatorV * 32);
  edtSubtotal.Left          := Round(gcFatorV * 240);

  lstTicketCorpo.Font.Size  := Round(gcFatorV * 11);
end;

procedure TfrmCaixaAberto.prcCarregaItensTicketTela(qTabelaItens: TFDQuery);
var
  iSeq : Integer;
  sTextoL1, sTextoL2, sTemp : string;
  cValItTot : Currency;
begin
  qTabelaItens.Open;
  qTabelaItens.First;
  iSeq := 1;
  while not qTabelaItens.Eof do
  begin
    sTextoL1 := ' ' + Format('%.3d', [iSeq]) + ' ';
    sTextoL1 := sTextoL1 + qTabelaItens.FieldByName('codprod').AsString + ' ';
    sTextoL1 := sTextoL1 + qTabelaItens.FieldByName('desc').AsString;
    sTemp := FormatFloat('0', qTabelaItens.FieldByName('qtd').AsCurrency);
    sTemp := sTemp + qTabelaItens.FieldByName('und').AsString + ' x ';
    sTemp := sTemp + FormatFloat('#,##0.00', qTabelaItens.FieldByName('vlun').AsCurrency);
    cValItTot := qTabelaItens.FieldByName('qtd').AsCurrency * qTabelaItens.FieldByName('vlun').AsCurrency;
    sTextoL2 := ' ' + fncTextoEspacoFim(qTabelaItens.FieldByName('descesp').AsString, 25) + ' ';
    sTextoL2 := sTextoL2 + fncTextoEspacoIni(sTemp, 15) + '  ';
    sTextoL2 := sTextoL2 + fncTextoEspacoIni(FormatFloat('#,##0.00', cValItTot), 8);

    lstTicketCorpo.Items.Add(sTextoL1);
    lstTicketCorpo.Items.Add(sTextoL2);
    lstTicketCorpo.TopIndex := iSeq * 2;

    iSeq := iSeq + 1;
    qTabelaItens.Next;
  end;

end;

procedure TfrmCaixaAberto.prcCarregaTicketTela;
var
  sTextoL1, sTextoL2, sTemp : string;
begin
  sTextoL1 := 'Ticket: ' + frmDados.Ticket.numticket + '    ';
  sTextoL1 := sTextoL1 + 'Caixa: ' + frmDados.Ticket.caixa + '    ';
  sTextoL1 := sTextoL1 + FormatDateTime('dd/mm/yyyy hh:mm:ss', frmDados.Ticket.aberto_em);
  sTextoL2 := 'Op.: ' + fncTextoEspacoFim(frmDados.Ticket.opnome, 36);
  sTextoL2 := sTextoL2 + 'PDV: ' + frmDados.Ticket.pdv;

  edtTicketTopL1.Text := sTextoL1;
  edtTicketTopL2.Text := sTextoL2;
end;

procedure TfrmCaixaAberto.prcIniciaTicketTela;
var
  i : Integer;
begin
  lstTicketCorpo.Items.Clear;
  for i := 1 to 18 do
    lstTicketCorpo.Items.Add(Espaco(1));

end;

end.
