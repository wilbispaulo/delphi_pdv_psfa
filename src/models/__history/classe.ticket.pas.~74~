unit classe.ticket;

interface
uses
  FireDAC.Comp.Client,
  Data.DB,
  FireDAC.DApt,
  System.SysUtils,
  unit_funcoes,
  unit_globals,
  unitControladorMensagem,
  Vcl.Forms;

type
  TTicket = class
  private
    FConexao      : TFDConnection;
    FControladorMensagem: TControladorMensagem;
    FMsgErro      : string;
    FData         : TDate;
    FNumticket    : string;
    FPdv          : string;
    FCaixa        : string;
    FOpnome       : string;
    FInfo1        : string;
    FInfo2        : string;
    FInfo3        : string;
    FInfo4        : string;
    FTotal        : Currency;
    FAberto_em    : TDateTime;
    FFechado      : string;
    FFechado_em   : TDateTime;
    FCancelado    : string;
    FCancelado_em : TDateTime;

  public
    property Conexao      : TFDConnection read FConexao write FConexao;
    property MsgErro      : string read FMsgErro write FMsgErro;

    property pdv          : string read FPdv write FPdv;
    property data         : TDate read FData write FData;
    property numticket    : string read FNumticket write FNumticket;
    property caixa        : string read FCaixa write FCaixa;
    property opnome       : string read FOpnome write FOpnome;
    property info1        : string read FInfo1 write FInfo1;
    property info2        : string read FInfo2 write FInfo2;
    property info3        : string read FInfo3 write FInfo3;
    property info4        : string read FInfo4 write FInfo4;
    property total        : Currency read FTotal write FTotal;
    property aberto_em    : TDateTime read FAberto_em write FAberto_em;
    property fechado      : string read FFechado write FFechado;
    property fechado_em   : TDateTime read FFechado_em write FFechado_em;
    property cancelado    : string read FCancelado write FCancelado;
    property cancelado_em : TDateTime read FCancelado_em write FCancelado_em;

    constructor Create(vConexao: TFDConnection);
    destructor Destroy; override;

    function fncAbreProximoTicket(
      vPdv    : string;
      vCaixa  : string;
      vOpNome : string;
      vInfo1  : string;
      vInfo2  : string;
      vInfo3  : string;
      vInfo4  : string
    ): Boolean;
    function fncAtualizaTotal(vTotal: Currency): Boolean;
    function fncFechaTicket: Boolean;
    function fncTicketAberto(sPdv: string; sCaixa: string): Boolean;
    procedure prcFechar;
    procedure prcAbrir;
    procedure prcSQLInit;

  end;
  var
    QryConsulta : TFDQuery;
    sProxTicket : string;

implementation

{ TTicket }

constructor TTicket.Create(vConexao: TFDConnection);
begin
  FConexao := vConexao;
  FControladorMensagem := TControladorMensagem.Create;
  QryConsulta := TFDQuery.Create(nil);
  QryConsulta.Connection := FConexao;
end;

destructor TTicket.Destroy;
begin
  QryConsulta.Destroy;
  FControladorMensagem.Free;
  inherited;
end;

procedure TTicket.prcAbrir;
begin
  try
    FConexao.Connected := True;
  except on E: Exception do
    begin
      FMsgErro      := E.Message;
      gbServidorOk  := False;
    end;
  end;
end;

procedure TTicket.prcFechar;
begin
  try
    FConexao.Connected := False;
    gbServidorOk := False;
  except on E: Exception do
    begin
      FMsgErro      := E.Message;
      gbServidorOk  := False;
    end;
  end;
end;

procedure TTicket.prcSQLInit;
begin
  QryConsulta.Close;
  QryConsulta.SQL.Clear;
end;

function TTicket.fncAbreProximoTicket(
  vPdv    : string;
  vCaixa  : string;
  vOpNome : string;
  vInfo1  : string;
  vInfo2  : string;
  vInfo3  : string;
  vInfo4  : string
): Boolean;
var
  lsProxTicket  : string;
  ldData        : TDate;
  ldAberto_em   : TDateTime;
begin
  Result          := False;
  ldData        := Date();
  ldAberto_em   := Now();

  try
    prcFechar;
    prcAbrir;

    prcSQLInit;

    try
      FConexao.StartTransaction;
      FConexao.TxOptions.AutoCommit := False;

      prcSQLInit;

      FControladorMensagem.Mostrar(
        'BANCO DE DADOS',
        'TABELA TICKET===>',
        'Gravando novo TICKET...',
        ExtractFilePath(Application.ExeName) + '\assets\timer.png'
      );

      //fncCriarMensagemGlobal('BANCO DE DADOS',
      //               'TABELA TICKET***',
      //               'Gravando TICKET.',
      //               ExtractFilePath(Application.ExeName) + '\assets\timer.png',
      //               'NO_CTRL');

      // Bloqueia a tabela em modo exclusivo
      FConexao.ExecSQL('LOCK TABLES ticket WRITE');

      QryConsulta.SQL.Text := 'SELECT recno FROM ticket ORDER BY recno DESC LIMIT 1';
      QryConsulta.Open;
      if QryConsulta.RecordCount = 0 then
        lsProxTicket := '000001'
      else
        lsProxTicket := Format('%.6d', [QryConsulta.FieldByName('recno').AsInteger + 1]);

      prcSQLInit;
      QryConsulta.SQL.Add('INSERT INTO ticket ');
      QryConsulta.SQL.Add('(data, numticket, pdv, caixa, opnome, info1, info2, ');
      QryConsulta.SQL.Add('info3, info4, total, aberto_em, fechado, cancelado, ');
      QryConsulta.SQL.Add('fechado_em, cancelado_em) ');
      QryConsulta.SQL.Add('VALUES (:pData, :pNumticket, :pPdv, :pCaixa, ');
      QryConsulta.SQL.Add(':pOpnome, :pInfo1, :pInfo2, :pInfo3, :pInfo4, ');
      QryConsulta.SQL.Add(':pTotal, :pAberto_em, :pFechado, :pCancelado, :pFechado_em, :pCancelado_em)');
      QryConsulta.ParamByName('pData').AsDate             := ldData;
      QryConsulta.ParamByName('pNumticket').AsString      := lsProxTicket;
      QryConsulta.ParamByName('pPdv').AsString            := vPdv;
      QryConsulta.ParamByName('pCaixa').AsString          := vCaixa;
      QryConsulta.ParamByName('pOpnome').AsString         := vOpnome;
      QryConsulta.ParamByName('pInfo1').AsString          := vInfo1;
      QryConsulta.ParamByName('pInfo2').AsString          := vInfo2;
      QryConsulta.ParamByName('pInfo3').AsString          := vInfo3;
      QryConsulta.ParamByName('pInfo4').AsString          := vInfo4;
      QryConsulta.ParamByName('pTotal').AsCurrency        := 0.00;
      QryConsulta.ParamByName('pAberto_em').AsDateTime    := ldAberto_em;
      QryConsulta.ParamByName('pfechado').AsString        := '';
      QryConsulta.ParamByName('pCancelado').AsString      := '';
      QryConsulta.ParamByName('pfechado_em').AsDateTime   := EncodeDate(1900, 1, 1);
      QryConsulta.ParamByName('pCancelado_em').AsDateTime := EncodeDate(1900, 1, 1);
      QryConsulta.ExecSQL;

      FConexao.ExecSQL('UNLOCK TABLES');
      FConexao.Commit;

      FData         := ldData;
      FNumticket    := lsProxTicket;
      FPdv          := vPdv;
      FCaixa        := vCaixa;
      FOpnome       := vOpNome;
      FInfo1        := vInfo1;
      FInfo2        := vInfo2;
      FInfo3        := vInfo3;
      FInfo4        := vInfo4;
      FTotal        := 0.00;
      FAberto_em    := ldAberto_em;
      FFechado      := '';
      FCancelado    := '';

      Result := True;
    except
      on E: EDatabaseError do
      begin
        //Libera a tabela
        FConexao.ExecSQL('UNLOCK TABLES');
        FConexao.Rollback;
        Result := False;
      end;
    end;
  finally
    FConexao.TxOptions.AutoCommit := True;
    FControladorMensagem.Remover;
  end;
end;

function TTicket.fncTicketAberto(sPdv: string; sCaixa: string): Boolean;
var
  lbTicketAberto : Boolean;
begin
  lbTicketAberto := False;
  try
    prcFechar;
    prcAbrir;

    prcSQLInit;

    QryConsulta.SQL.Add('SELECT * FROM ticket ');
    QryConsulta.SQL.Add('WHERE pdv = :pPDV ');
    QryConsulta.SQL.Add('AND caixa = :pCaixa ');
    QryConsulta.SQL.Add('AND fechado <> "*" AND cancelado <> "*"');
    QryConsulta.ParamByName('pPDV').AsString := sPdv;
    QryConsulta.ParamByName('pCaixa').AsString := sCaixa;
    QryConsulta.Open;

    if QryConsulta.RecordCount > 0 then
    begin
      FNumticket  := QryConsulta.FieldByName('numticket').AsString;
      FPdv        := QryConsulta.FieldByName('pdv').AsString;
      FData       := QryConsulta.FieldByName('data').AsDateTime;
      FCaixa      := QryConsulta.FieldByName('caixa').AsString;
      FOpnome     := QryConsulta.FieldByName('opnome').AsString;
      FInfo1      := QryConsulta.FieldByName('info1').AsString;
      FInfo2      := QryConsulta.FieldByName('info2').AsString;
      FInfo3      := QryConsulta.FieldByName('info3').AsString;
      FInfo4      := QryConsulta.FieldByName('info4').AsString;
      FAberto_em  := QryConsulta.FieldByName('aberto_em').AsDateTime;

      lbTicketAberto := True;
    end
    else
    begin
      lbTicketAberto := False;
    end;

  finally
    Result := lbTicketAberto;
  end;
end;

function TTicket.fncAtualizaTotal(vTotal: Currency): Boolean;
var
  lbOk : Boolean;
begin
  lbOk := False;
  try
    prcFechar;
    prcAbrir;

    FConexao.StartTransaction;
    FConexao.TxOptions.AutoCommit := False;
    try
      prcSQLInit;
      QryConsulta.SQL.Add('SELECT numticket FROM ticket ');
      QryConsulta.SQL.Add('WHERE numticket = :pNumticket ');
      QryConsulta.SQL.Add('AND fechado = "*" AND cancelado <> "*"');
      QryConsulta.ParamByName('pnumticket').AsString := FNumticket;
      QryConsulta.Open;

      if QryConsulta.RecordCount > 0 then
        lbOk := False
      else
      begin
        prcSQLInit;
        QryConsulta.SQL.Add('UPDATE ticket ');
        QryConsulta.SQL.Add('SET total = :pTotal ');
        QryConsulta.SQL.Add('WHERE numticket = :pNumticket');
        QryConsulta.ParamByName('pTotal').AsCurrency := vTotal;
        QryConsulta.ParamByName('pNumticket').AsString := FNumticket;
        QryConsulta.ExecSQL;
        FConexao.Commit;

        FTotal        := vTotal;
        lbOk          := True;
      end;

    except
      FConexao.Rollback;
      lbOk := False;
      raise;
    end;
  finally
    FConexao.TxOptions.AutoCommit := True;
    Result := lbOk;
  end;
end;

function TTicket.fncFechaTicket: Boolean;
var
  ldFechado_em : TDateTime;
  lbOk : Boolean;
begin
  ldFechado_em := Now();
  lbOk := False;
  try
    prcFechar;
    prcAbrir;

    FConexao.StartTransaction;
    FConexao.TxOptions.AutoCommit := False;
    try
      prcSQLInit;
      QryConsulta.SQL.Add('SELECT numticket FROM ticket ');
      QryConsulta.SQL.Add('WHERE numticket = :pNumticket ');
      QryConsulta.SQL.Add('AND fechado = "*" AND cancelado <> "*"');
      QryConsulta.ParamByName('pnumticket').AsString := FNumticket;
      QryConsulta.Open;

      if QryConsulta.RecordCount > 0 then
        lbOk := False
      else
      begin
        prcSQLInit;
        QryConsulta.SQL.Add('UPDATE ticket ');
        QryConsulta.SQL.Add('SET total = :pTotal, fechado_em = :pFechado_em, fechado = :pFechado ');
        QryConsulta.SQL.Add('WHERE numticket = :pNumticket');
        QryConsulta.ParamByName('pTotal').AsCurrency := FTotal;
        QryConsulta.ParamByName('pFechado_em').AsDateTime := ldFechado_em;
        QryConsulta.ParamByName('pFechado').AsString := '*';
        QryConsulta.ParamByName('pNumticket').AsString := FNumticket;
        QryConsulta.ExecSQL;
        FConexao.Commit;

        FFechado_em   := ldFechado_em;
        FFechado      := '*';
        lbOk          := True;
      end;

    except
      FConexao.Rollback;
      lbOk := False;
      raise;
    end;
  finally
    FConexao.TxOptions.AutoCommit := True;
    Result := lbOk;
  end;
end;

end.
